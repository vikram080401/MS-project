package com.ecommerce.shopping.app.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.authentication.HttpStatusEntryPoint;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;


@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private CustomOAuth2UserService oAuth2UserService;
	
	@Autowired
	private OAuth2LoginSuccessHandler oauth2SuccessHandler;
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
		.antMatchers("/oauth2/**","/").permitAll()
		.antMatchers("/customer/**").authenticated()
		.antMatchers("/**", "/error", "/webjars/**").permitAll().anyRequest().authenticated()		
		.and()
		.formLogin()
				.loginPage("/login")
				.usernameParameter("email")
				.permitAll()
				.defaultSuccessUrl("/customer/view")
		.and()
		
		.oauth2Login()
				.loginPage("/")
				.userInfoEndpoint().userService(oAuth2UserService)
				.and()
				.successHandler(oauth2SuccessHandler)
		
		.and()
		.logout().permitAll().logoutSuccessUrl("https://www.youtube.com/")
		.and()		
		
		
		;
	}

	@Bean
	public PersistentTokenRepository persistentTokenRepository() {
		JdbcTokenRepositoryImpl tokenRepository=new JdbcTokenRepositoryImpl();
		tokenRepository.setDataSource(dataSource);
		return tokenRepository;
	}
	
}

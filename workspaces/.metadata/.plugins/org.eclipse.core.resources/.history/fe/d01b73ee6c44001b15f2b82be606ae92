package com.ecommerce.shopping.app.security;

import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import com.ecommerce.shopping.app.model.Customers;
import com.ecommerce.shopping.app.service.CustomerService;

@Component
public class OAuth2LoginSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

	@Autowired
	CustomerService custService;
	
	private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();
	
	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {
		
		
        
		CustomerOAuthUser oAuthUser= (CustomerOAuthUser) authentication.getPrincipal();
		String email=oAuthUser.getEmail();
		String name=oAuthUser.getName();
		
		Customers EmailExist= custService.getOneCustomerbyEmailID(email);
		if (EmailExist==null) {
			System.out.println("New User Please register");
			handle(request, response, authentication);
	        clearAuthenticationAttributes(request);
			
		} 
		else { System.out.println("You ar a existing user");
		
		handle(request, response, authentication);
        clearAuthenticationAttributes(request);
		
		}
		
		System.out.println("Customer's email : "+email +" customer name:  "+name + "Email from DB : "+ EmailExist.getCustomeremailid());
		super.onAuthenticationSuccess(request, response, authentication);
	}
	
	protected void handle(
	        HttpServletRequest request,
	        HttpServletResponse response, 
	        Authentication authentication
	) throws IOException {

	    String targetUrl = determineTargetUrl(authentication);

	    if (response.isCommitted()) {
	        logger.debug(
	                "Response has already been committed. Unable to redirect to "
	                        + targetUrl);
	        return;
	    }

	    redirectStrategy.sendRedirect(request, response, targetUrl);
	}

	protected String determineTargetUrl(final Authentication authentication) {

	    Map<String, String> roleTargetUrlMap = new HashMap<>();
	    roleTargetUrlMap.put("ROLE_USER", "/user.html");
	    roleTargetUrlMap.put("ROLE_ADMIN", "/index.html");

	    final Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
	    for (final GrantedAuthority grantedAuthority : authorities) {
	        String authorityName = grantedAuthority.getAuthority();
	        if(roleTargetUrlMap.containsKey(authorityName)) {
	            return roleTargetUrlMap.get(authorityName);
	        }
	    }

	    throw new IllegalStateException();
	}

	
}

package com.goods.spring.mvc.app.service;


import java.util.Collections;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.netflix.hystrix.EnableHystrix;
import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;
import org.springframework.stereotype.Service;


import com.goods.spring.mvc.app.dao.CustomerLoginsRepository;
import com.goods.spring.mvc.app.model.CustomerLogins;
import com.goods.spring.mvc.app.model.Customers;
import com.netflix.discovery.EurekaClient;


@Service
@EnableHystrix
@EnableHystrixDashboard
@EnableCircuitBreaker
@EnableDiscoveryClient
public class CustomerService implements ICustomerService {
	
	@Autowired
	EurekaClient eurekaClient;

	@Autowired
	RestTemplateBuilder restTemplateBuilder;

	@Value("${microservice.shipping-service.endpoints.endpoint.uri}")
	private String SHIPPING_SERVICE_URL;

	@Value("${microservice.shipping-service.endpoints.operation.uri}")
	private String SHIPPING_OPERATION;

	public String callShip_Fallback(Customers customer) {

		return "Service Unavailable!!";

	}
	
	
	Logger logger = LoggerFactory.getLogger(CustomerService.class);
	@Autowired
	com.goods.spring.mvc.app.dao.CustomerRepository customerRespository;

	
	@Autowired
	CustomerLoginsRepository loginRepository;
	
	public CustomerLogins SaveCustomerLogins(CustomerLogins custlogin) {
		return loginRepository.save(custlogin);
	}
	
	public List<Customers> getAllCustomer(){
		List<Customers> allCustomerList =Collections.emptyList();
		try {		
			 allCustomerList= (List<Customers>) customerRespository.findAll();
			 logger.info("Customer-Service: Returned all customers from database");
		} catch (Exception e) {
			
			logger.error("Customer-Service: "+e.getMessage());
		}
		return allCustomerList;
	}
	public Customers getOneCustomersbyID(long customerid) {
		Customers customer=new Customers();
		try {
			customer=customerRespository.findById(customerid).orElse(null);
			logger.info("Customer-Service: Returned customer from database");
		} catch (Exception e) {
			logger.error("Customer-Service: "+e.getMessage());
		}
		
		return  customer;
	}

	public Customers getOneCustomerbyEmailID(String emailid) {
		Customers customer=new Customers();
		try {
			customer=customerRespository.findByCustomeremailid(emailid);
		} catch (Exception e) {
			logger.error("Customer-Service: "+e.getMessage());
		}
		
		return customer;
	}

	@Override
	public Customers AddNewCustomer(Customers customer) {
		return customerRespository.save(customer);
	}
	
}

package com.ecommerce.shopping.oauth2;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.authentication.HttpStatusEntryPoint;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;

import org.springframework.security.web.csrf.CookieCsrfTokenRepository;



@SpringBootApplication

public class OAuth2Application extends WebSecurityConfigurerAdapter {

	public static void main(String[] args) {
		SpringApplication.run(OAuth2Application.class, args);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		SimpleUrlAuthenticationFailureHandler handler = new SimpleUrlAuthenticationFailureHandler("/");
		// @formatter:off
		http
        .authorizeRequests(a -> a
            .antMatchers("/**", "/error", "/webjars/**").permitAll().anyRequest().authenticated())
        .exceptionHandling(e -> e
                .authenticationEntryPoint(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))
            )
        .csrf(c -> c
				.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
			)
			.logout(l -> l
				.logoutSuccessUrl("/").permitAll()
			)
            .oauth2Login(o -> o
    				.failureHandler((request, response, exception) -> {
    					request.getSession().setAttribute("error.message", exception.getMessage());
    					handler.onAuthenticationFailure(request, response, exception);
    				}).redirectionEndpoint().baseUri("/login/oauth2/code/google")
    			);

		
		// @formatter:on
	}
}

/*
*/